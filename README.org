* Project 6 Trees

* Final Due Date: Monday May 15, 8:30am
* Files and overall ntoes
- This project requires:
  - A Makefile
  - Doctest based tests
  - At least three targets in the Makefile
    1. main (program executable)
    2. tests (doctest tests executable)
    3. clean (remove the .o files) 
  - You should start with either the code that we developed and is on
    our web site or your own equivalent.
  - This project should be tested using doctest
  - Make sure to use exceptions as we discussed in class to handle error conditions.
* Part 1

- Write a recursive version of the search routine. You can write
  additional routines so that you can add parameters. That is, you'll
  probably have the public function ~int rsearch(int value)~ and also
  another one that the first one calls: ~int rsearch(int value, Node
  *p)~.

- Try to write a recursive version of insert. This will not be graded
  if you don't finish it but give it a try. If it doesn't work, just
  remove it from the tests and comment out what you wrote so that your
  end project compiles and runs.

- Generate 10 random numbers and then insert them into a BST using the
  algorithm we designed. Draw out what that tree looks like. You don't
  have to submit anything for this. 
* Part 2 
- Write the delete routine using the algorithm we defined in class 
- Here are two references but don't look at the code (unless you
  really need to, first try, then ask for help on Zulip and then if
  you use the code on these sites, make sure to cite it):
  - http://www.algolist.net/Data_structures/Binary_search_tree/Removal
  - https://helloacm.com/how-to-delete-a-node-from-a-binary-search-tree/
* Part 3
write at least 2 of these routines.

A couple of people had low grades for the previous assignment due to
them forgetting to push things. For those people, if you complete all
5 of these and message me, I will also regrade previous lab if your
only mistake was forgetting to push a file or an upper lower case
issue (you know if this applies to you since we've spoken).

- count leaves
- height of a tree (a tree with just the root can be height 0 or 1,
  whichever you prefer)
- sum at given level level (add all values at level n)
- tree pretty printer (this is a challenge, print out the tree using
  tabs to make it look nice
- cousins - true if two nodes at same level

